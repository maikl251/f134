import random 
from collections import Counter 
def proga():
#Формируем пространство результатов 5/36 в 8 случаях#
    res = []
    numbers = []
    for k in range(1,9):
        print(f'Введи результат {k} тиража')
        c = []
        for j in range(5):
            r = int(input())
            if r not in numbers:
                numbers.append(r)
            c.append(r)
        res.append(c)
    num  = []
    for i in res:
        for j in i:
            num.append(j)
# поределяем количество четных и нечетных чисел в каждом тираже#
    even = 0
    for i in numbers:
        if i % 2 == 0:
            even += 1
    kof1 = even / len(numbers)
    r=0
    if kof1 > 0.5:
        print('\nВыигрышная ставка: нечетные')
        r=1
    else:
        print('\nВыигрышная ставка: четные')
        r=2

# Определяем среднюю сумму чисел в тираже после проведения 8и тиражей 
    median_three = []
    for k in res:
        c = sum(k)
        median_three.append(c)
    median  = sum(median_three)/8
    print('\nСуммы чисел в каждом тираже равны')
    i = 1
    for k in median_three:
        print(f'для тиража {i}--> {k}')
        i += 1

    print(f'Среднаяя сумма цифр в тираже равна {median}')


#Формируем пространство предсказаний каждому
    result = []
    for _ in range(100000):
        p1 = []
        p2 = []
        if r == 1:
            while len(p1) < 3:
                x1 = random.choice(num)
                if x1 % 2 != 0 and x1 not in p1:
                    p1.append(x1)
            while len(p2) < 2:
                x2 = random.choice(num)
                if x2 % 2 == 0 and x2 not in p2:
                    p2.append(x2)
                
        elif r == 2:
            while len(p1) < 3:
                x1 = random.choice(num)
                if x1 % 2 == 0 and x1 not in p1:
                    p1.append(x1)
            while len(p2) < 2:
                x2 = random.choice(num)
                if x2 % 2 != 0 and x2 not in p2:
                    p2.append(x2)

        p = p1 + p2
        for x  in p:
            result.append(x)
                    
#Формируем статистику#
    itog = Counter(result)
    itogo = itog.most_common()
    print('\nРезультаты последнего тиража')
    print(res[0])
    print('\nВыпавшие числа за последние 8и тиражей')
    print(numbers)
    print('\nРезультаты')
    print()
    for k in itogo:
        print(f'число {k[0]} --> {k[1]} раз')


#Определяем интервал, в котором наиболее большие значения повторений, это также означает, что за последние 8 тиражей наиболее часто выпадали цифры из противоположного интервала, соответственно из него берём 3 цифры с наибольшим числом повторений, а из исходного - 2 цифры(гипотеза), набор только из уже выпавших цифр, это и будет наш интервал

    stat = sorted(itogo, key = lambda x: x[0])
    interval_12 = []
    interval_24 = []
    interval_36 = []
    C12 = 0
    C24 = 0
    C36 = 0
    for k in stat:
        if k[0]<=12:
            C12 += k[1]
            interval_12.append(k)
        elif 12<k[0]<=24:
            C24 += k[1]
            interval_24.append(k)
        else:
            C36 += k[1]
            interval_36.append(k)
    interval_12 = sorted(interval_12, key = lambda x: x[1])
    interval_24 = sorted(interval_24, key = lambda x: x[1])
    interval_36 = sorted(interval_36, key = lambda x: x[1])
    if C12>=C24 and C24>=C36:
        p1 = interval_12[:2]
        p2 = interval_24[:2]
        p3 = interval_36[:1]
    elif C12>=C36 and C36>=C24:
        p1 = interval_12[:2]
        p2 = interval_36[:2]
        p3 = interval_24[:1]
    elif C24>=C12 and C12>=C36:
        p1 = interval_24[:2]
        p2 = interval_12[:2]
        p3 = interval_18[:1]
    elif C24>=C36 and C36>=C12:
        p1 = interval_24[:2]
        p2 = interval_36[:2]
        p3 = interval_12[:1]
    elif C36>=C12 and C12>=C24:
        p1 = interval_36[:2]
        p2 = interval_12[:2]
        p3 = interval_24[:1]
    else:
        p1 = interval_36[:2]
        p2 = interval_24[:2]
        p3 = interval_12[:1]
        
    oracle = p1+p2+p3
    print('\nВозможные результаты')
    for k in oracle:
        print(f'цифра {k[0]} - -> {k[1]} раз')

proga()
